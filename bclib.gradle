buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.114'
    }

    repositories {
        gradlePluginPortal()
    }
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    mappings channel: project.mappings, version: project.mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            arg "-mixin.config=together.mixins.common.json"
            arg "-mixin.config=together.mixins.client.json"
            arg "-mixin.config=ui.mixins.client.json"
            arg "-mixin.config=bclib.mixins.common.json"
            arg "-mixin.config=bclib.mixins.client.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bclib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            arg "-mixin.config=together.mixins.common.json"
            arg "-mixin.config=together.mixins.client.json"
            arg "-mixin.config=ui.mixins.client.json"
            arg "-mixin.config=bclib.mixins.common.json"
            arg "-mixin.config=bclib.mixins.client.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bclib {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            arg "-mixin.config=together.mixins.common.json"
            arg "-mixin.config=together.mixins.client.json"
            arg "-mixin.config=ui.mixins.client.json"
            arg "-mixin.config=bclib.mixins.common.json"
            arg "-mixin.config=bclib.mixins.client.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bclib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'bclib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                bclib {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.terraformersmc.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}")
}

processResources {
    println "Version: ${project.mod_version}"
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 17
}

javadoc {
    options.tags = ["reason"]
    options.stylesheetFile = new File(projectDir, "javadoc.css");
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
    from "LICENSE.ASSETS"
}

mixin {
    add sourceSets.main, "bclib.refmap.json"
    config "together.mixins.common.json"
    config "together.mixins.client.json"
    config "ui.mixins.client.json"
    config "bclib.mixins.common.json"
    config "bclib.mixins.client.json"

    debug.verbose = true
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def env = System.getenv()

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId archivesBaseName
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/quiqueck/bclib")
            credentials {
                username = env.GITHUB_USER
                password = env.GITHUB_TOKEN
            }
        }
    }
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}
